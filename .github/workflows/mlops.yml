name: MLOps Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *'  # monatlich am 1. um 00:00 UTC

permissions:
  contents: read
  packages: write

jobs:
  # ───────────────────────────────────────────────────────────────
  # 1) deploy_job: deployt den Container, extrahiert latest_data.csv
  #    und lädt sie als „latest-data“-Artifact hoch.
  deploy:
    needs: build-and-push
    runs-on: [self-hosted, Windows]
    permissions:
      contents: write
    env:
      API_TOKEN: ${{ secrets.API_TOKEN }}
      FRAUD_THRESHOLD: "0.4"
      MODEL_PATH: "models/rf_model.pkl"
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Pull & restart container locally
        shell: cmd
        run: |
          docker pull ghcr.io/andipfluegl/fraud-api:latest
          docker rm -f fraud_api || echo No existing container
          docker run -d --name fraud_api ^
            --env "API_TOKEN=%API_TOKEN%" ^
            --env "FRAUD_THRESHOLD=%FRAUD_THRESHOLD%" ^
            --env "MODEL_PATH=%MODEL_PATH%" ^
            -p 5000:5000 ^
            -v "%GITHUB_WORKSPACE%\data:/app/data" ^
            ghcr.io/andipfluegl/fraud-api:latest


  # ───────────────────────────────────────────────────────────────
  # 2) drift_job: zieht das „latest-data“-Artifact, führt Drift-Detection
  #    aus und setzt output: drift=true/false
  drift_job:
    needs: deploy_job
    runs-on: ubuntu-latest
    outputs:
      drift: ${{ steps.detect.outputs.drift }}
    steps:
      - uses: actions/checkout@v3

      - name: Download latest-data artifact
        uses: actions/download-artifact@v4
        with:
          name: latest-data
          path: data

      - name: Install drift deps
        run: pip install pandas scipy joblib jq

      - name: Run drift detection
        id: detect
        env:
          OLD_DATA_PATH: data/reference_data.csv
          NEW_DATA_PATH: data/latest_data.csv
        run: |
          python drift_detector.py
          DRIFT=$(jq .drift_detected drift_result.json)
          echo "drift=$DRIFT" >> $GITHUB_OUTPUT

      - name: Upload drift result
        uses: actions/upload-artifact@v4
        with:
          name: drift-result
          path: drift_result.json

  # ───────────────────────────────────────────────────────────────
  # 3) retrain_job: nur bei drift=true oder zu Zeitplan retrainen
  retrain_job:
    needs: drift_job
    if: needs.drift_job.outputs.drift == 'true' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install retrain deps
        run: pip install -r requirements.txt mlflow

      - name: Retrain model on latest data
        env:
          TRAIN_DATA_PATH: data/latest_data.csv
        run: python retrain_model.py

      - name: Upload new model artifact
        uses: actions/upload-artifact@v4
        with:
          name: model-artifact
          path: models/rf_model.pkl

  # ───────────────────────────────────────────────────────────────
  # 4) build-and-push: baut und published das neue Docker-Image
  build-and-push:
    needs: retrain_job
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set lowercase owner name
        shell: bash
        env:
          OWNER: ${{ github.repository_owner }}
        run: |
          echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/fraud-api:latest
            ghcr.io/${{ env.OWNER_LC }}/fraud-api:${{ github.sha }}


  # ───────────────────────────────────────────────────────────────
  # 5) final deploy (optional, wie gehabt wieder aufself-hosted)
  deploy_final:
    needs: build-and-push
    runs-on: [self-hosted, Windows]
    steps:
      - name: Pull & restart container locally
        run: |
          docker pull ghcr.io/andipfluegl/fraud-api:latest
          docker rm -f fraud_api || echo "no container"
          docker run -d --name fraud_api \
            --env "API_TOKEN=${{ secrets.API_TOKEN }}" \
            --env "FRAUD_THRESHOLD=0.4" \
            --env "MODEL_PATH=models/rf_model.pkl" \
            -p 5000:5000 \
            ghcr.io/andipfluegl/fraud-api:latest
